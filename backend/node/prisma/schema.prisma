// -------------------------
// Prisma Generator and Datasource
// -------------------------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------------------
// ENUM for platform roles 
// -------------------------
enum Role {
  USER      // Default role for all users
  ADMIN     // Platform management
}

// -------------------------
// USERS MODEL (Core profile)
// -------------------------
model User {
  id              String         @id @default(uuid())
  email           String         @unique
  name            String?
  username        String?        @unique
  role            Role           @default(USER) 
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  emailVerified   DateTime?

  // -------------------- Profile Fields --------------------
  job_title             String?
  company               String?
  industry              String?
  phone_number          String?
  location              String?
  website_url           String?
  linkedin_url          String?
  github_url            String?
  professional_summary  String?
  years_experience      Int?
  career_level          String?
  avatar_url            String?

  // Relations
  authProviders   AuthProvider[]
  sessions        Session[]
}

// -------------------------
// AUTH PROVIDERS MODEL
// -------------------------
model AuthProvider {
  id              String    @id @default(uuid())
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String

  provider        Provider
  providerUserId  String?

  passwordHash    String?
  accessToken     String?
  refreshToken    String?

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([provider, providerUserId])
}

// -------------------------
// SESSIONS MODEL
// -------------------------
model Session {
  id            String    @id @default(uuid())
  sessionToken  String    @unique
  userId        String
  expires       DateTime
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}


// -------------------------
// VERIFICATION TOKENS MODEL
// -------------------------
model VerificationToken {
  id          String   @id @default(uuid())
  identifier  String
  token       String   @unique
  expires     DateTime

  @@unique([identifier, token])
}

// -------------------------
// ENUM for providers
// -------------------------
enum Provider {
  email
  google
  github
}